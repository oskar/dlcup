//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DLCup.Common.Model
{
    public partial class Match
    {
        #region Primitive Properties
    
        public virtual int MatchId
        {
            get;
            set;
        }
    
        public virtual int Points
        {
            get;
            set;
        }
    
        public virtual int PlayOrder
        {
            get;
            set;
        }
    
        public virtual string MatchType
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Cup Cup
        {
            get { return _cup; }
            set
            {
                if (!ReferenceEquals(_cup, value))
                {
                    var previousValue = _cup;
                    _cup = value;
                    FixupCup(previousValue);
                }
            }
        }
        private Cup _cup;
    
        public virtual ICollection<Game> Games
        {
            get
            {
                if (_games == null)
                {
                    var newCollection = new FixupCollection<Game>();
                    newCollection.CollectionChanged += FixupGames;
                    _games = newCollection;
                }
                return _games;
            }
            set
            {
                if (!ReferenceEquals(_games, value))
                {
                    var previousValue = _games as FixupCollection<Game>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGames;
                    }
                    _games = value;
                    var newValue = value as FixupCollection<Game>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGames;
                    }
                }
            }
        }
        private ICollection<Game> _games;
    
        public virtual Player PrimaryGuestPlayer
        {
            get;
            set;
        }
    
        public virtual Player PrimaryHomePlayer
        {
            get;
            set;
        }
    
        public virtual Player SecondaryGuestPlayer
        {
            get;
            set;
        }
    
        public virtual Player SecondaryHomePlayer
        {
            get;
            set;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCup(Cup previousValue)
        {
            if (previousValue != null && previousValue.Matches.Contains(this))
            {
                previousValue.Matches.Remove(this);
            }
    
            if (Cup != null)
            {
                if (!Cup.Matches.Contains(this))
                {
                    Cup.Matches.Add(this);
                }
            }
        }
    
        private void FixupGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Game item in e.NewItems)
                {
                    item.Match = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Game item in e.OldItems)
                {
                    if (ReferenceEquals(item.Match, this))
                    {
                        item.Match = null;
                    }
                }
            }
        }

        #endregion
    }
}
